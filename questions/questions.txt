BACKEND - Programming
These can be done in any language you're comfortable with

1. Give a regular expression that detects hexadecimal numbers in a text.
For example, ‘0x0f4’, ‘0acdadecf822eeff32aca5830e438cb54aa722e3’, ‘8BADF00D’ should be detected.

> /\h+/ but it works only in Ruby, or (?:0[xX])?[0-9a-fA-F]+ which will match with either 0x, 0X or nothing at the begining

2.Here is the pseudo code of a function that is defined recursively:
-  f(0) = 1;
-  f(1) = 3;
-  f(n)= 3 * f(n-1) - f(n-2);
Provide an implementation for ‘f’. Bonus points for a non recursive implementation.

> RUBY :
 def f(n)
  if (n == 0)
    return 1
  elsif (n == 1)
    return 3
  elsif (n > 1)
    #a little french touch
    antepenultieme = 1
    penultieme = 3
    #we begin with 2 because we know f(0) and f(1) already
    for i in 2..n
      antepenultieme, penultieme = penultieme, (3 * penultieme) - antepenultieme
    end
    return penultieme
  end
end


BACKEND - MySQL

1. Write a CREATE TABLE query for a table storing information on users. It will store:
  - id,
  - firstname,
  - lastname,
  - gender,
  - email,
  - created_at

> CREATE TABLE users (
    id INT NOT NULL AUTO_INCREMENT,
    user_id INT NULL,
    first_name varchar(255),
    last_name varchar(255),
    email varchar(255),
    gender ENUM('F','M'),
    created_at TIMESTAMP NOT NULL,

);

2. Write a query on the previous table that lists the 10 most recently added users.

> SELECT *
	FROM users
	ORDER BY created_at DESC
	LIMIT 10;

GENERAL - Creativity
Si vous êtes Français, vous pouvez répondre en Français.

1. Describe the color yellow to someone who is blind

> Les rayons du soleil qui chauffent doucement tes mains froides en hiver, la douceur du pelage d'un labrador, la saveur du jaune d'oeuf dans une recette. Tout ça c'est la couleur jaune.
L'odeur insupportable d'un pissenlit n'ayant pas encore finit sa croissance, l'acidité qui te prend toute la machoire et remonte jusque dans tes oreilles quand tu mange un bonbon acidulé, un désert en plein soleil sans oasis ou civilisation à perte de vue. Ça aussi c'est la couleur jaune.
Merveilleusement doré, ou terriblement acide, le jaune ne se limite pas à une seule définition, il est présent partout sous différentes formes, comme toutes les couleurs.

3. Describe the data model you’d use for a Battleship game. What are the key objects? How will your code use them?

> On crée d'abord une classe Ship qu'on instanciera autant de fois qu'il y a de navires. Chaque navire aura un nom(Submarine, Cruiser etc), une taille et un nombre de point de vie - qui correspond à sa taille initiale -. Une fonction take_damage() existe pour lui retirer un point de vie. Quand ses points arrivent à zéro on appelle le destructeur de l'instance, et le bateau est détruit.

Une autre classe Board contiendra le double tableau qui constitue le plateau de jeu de chaque joueur (elle sera donc instanciée 2 fois). Pour placer un bateau on appelle place_ship() qui prend en paramètre un x, un y, un bateau instancié (pour obtenir sa taille) et une direction. Chaque case contenant une partie d'un Ship est un pointeur menant à l'instance de sa classe, permettant ainsi d'appeler la fonction take_damage() de l'instance. Le plateau marque alors cette case comme étant utilisée et un joueur se voit moquer s'il tente de retirer à cet emplacement.

Les joueur, appelons les Rick et Morty, jouent alors chacun leur tour sur le plateau de l'autre à peu près de cette façon : Rick_board.attack(x=1, y=3) ou encore Morty_board.attack(x=133, y=23), ce à quoi Rick répondra certainement que Morty doit avoir le QI d'une tarte flambée à l'oignon pour attaquer une case qui n'existe même pas sur le plateau.